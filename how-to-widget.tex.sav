\section{How to create a Widget}
\subsection{overview}
This capital is a short guide on how to write new widgets. This guide consists of 3 parts:
\begin{itemize}
    \item \textbf{KNX widget - Scala}
        shows you how to implement new KNX widgets just by extending some classes and overwriting some translate methods.
    \item \textbf{KNX widget - JavaScript}
        is a more detailed look on the widget support in sombrero from a JavaScript perspective. This guide should be useful if you need to implement the ui of a KNX widget by yourself.
    \item \textbf{widgets from scratch}
        brings all that you learned so far to a new level. Here will be shown how implement non KNX widgets on the example of the room link widget.
\end{itemize}

To understand how widgets in sombrero work you need to understand the widget life cycle.
After a page request has been send to the server, it will be dispatched and the respective site will be generated by Lift. If you load a room view page, sombrero loads all widgets in the respective room from the Database and generates widgets. After that these widgets are rendered into the site and the site will be sent to the client. 

The JavaScript part of the widgets is located in the folder toserve/widgets/js. If a widget needs a great amount of special CSS styles they are outsourced in the folder toserve/widgets/css. All widget Scala files are placed in the package org.sombrero.widget except KNX widgets, they can be found in the org.sombrero.widget.knx package.



/toserve/widget

/css

/js
\subsection{KNX widget - Scala}
\subsection{KNX widget - JavaScript}
\subsection{widgets from scratch}


org.sombrero.widget


package org.sombrero.widget

import _root_.net.liftweb.http._
import S._
import _root_.scala.xml._
import _root_.net.liftweb.http.js.{JE,JsCmd,JsCmds, JsExp}
import JsCmds._
import JE.{JsRaw,Str}
import _root_.net.liftweb.util._
import _root_.scala.collection.mutable.Map

import org.sombrero.util._
import org.sombrero.snippet._
import org.sombrero.model._
import org.sombrero.comet._

import tuwien.auto.calimero._
import tuwien.auto.calimero.link._
import tuwien.auto.calimero.process._
import tuwien.auto.calimero.link.medium._
import tuwien.auto.calimero.datapoint._
import tuwien.auto.calimero.dptxlator._


object Container {
	val htmlid = "col3_content"
}

trait FavParent {
  this: Widget =>
  val copy = "$(\"#FavCh_" + id + "\")"
  if(isFav) properties ++ Map("copy" -> copy)
}

trait AdminSideBar extends FavParent{
  this: Widget =>
  properties ++ Map("admin_img" -> """["ui-icon-help",
                                       "ui-icon-wrench",
                                       "ui-icon-trash",
                                       "ui-icon-plus"]""")
}

trait FavChild {
  this: Widget =>
  id = "FavCh_" + id
  parent = Fav.htmlid
}



abstract class StateWidget(data: model.Widget, widgetType: String)
	extends CommandWidget(data, widgetType) {
     val knx: StateKNXWidget[_]
	
    /*
     *
     */
	def setValue(value: Array[Byte]) = call("update_value", translate(value)).cmd
 	
    /* translates a value from a KNX/EIB device into an understandable one
 	 * for the KNX/EIB Devices
 	 */
    def translate(value: Array[Byte]): String
}

abstract class CommandWidget(data: model.Widget, widgetType: String)
	extends Widget(data, widgetType) {
    val knx: KNXWidget[_]
    val change = "function(){" + SHtml.ajaxCall(getValue, update _)._2 + "}"
    properties ++ Map(
	   "change" -> change
	)

    def getValue(): JsExp = getOption("value")

    def update(value: String): JsCmd = {
    	Log.info("Value: " + value + "; Recvied from: " + id)
	    knx.write(translate(value))
	    JsRaw(";").cmd
 	}

 	/* translates a value from the client into an understandable one
     * for the KNX/EIB Devices
 	 *	
 	 */
    def translate(value: String): String
}

abstract class Widget(data: model.Widget, widgetType: String) {
	var id = widgetType + "_" + data.id.is
	//var properties: List[(String, String)]
	val properties: Map[String, String] = Map()
	val com = new CometWidget(this)
	var parent: String = Container.htmlid
	val isFav = Fav.isFav(data)

	//Distributor ! Subscribe(data.id.is, com)
	def render(): NodeSeq = JavaScriptHelper.createWidget(id, widgetType, properties.toList :::
		List(	("top", data.top.is.toString),
				("left", data.left.is.toString),
				("text", '"' + data.name.is + '"'),
				("stop", "function(){" + SHtml.ajaxCall(getTopJsExp, setTop _)._2 + ";"
           			+ SHtml.ajaxCall(getLeftJsExp, setLeft _)._2 + ";}"),
           		("favorites", "$(\"#" + Fav.htmlid + "\")"),
           		("active", JavaScriptHelper.callback(newFavorite)),
           		("inactive", JavaScriptHelper.callback(delFavorite)),
           		("in_toolbox", JavaScriptHelper.callback(newToolboxitem)),
           		("out_toolbox", JavaScriptHelper.callback(delToolboxitem(Room.current)))
		) ::: admin ::: parentTag ::: isActive,
		content()
	)

 	def newToolboxitem(): JsCmd = {
  		 System.out.println("newToolbox");
  		 data.room(Empty).save
		 JsRaw(";").cmd
	}

  	def delToolboxitem(r : Box[model.Room])(): JsCmd = {
  		 System.out.println("delToolbox");
  		 data.room(r).save
		 JsRaw(";").cmd
	}
	def newFavorite(): JsCmd = {
  		 System.out.println("newFavorite");
		 Fav.add(data)
		 JsRaw(";").cmd
	}

 	def delFavorite(): JsCmd = {
  		 System.out.println("delFavorite");
 		 Fav.remove(data)
		 JsRaw(";").cmd
	}

 	def delWidget(): JsCmd = {
  		 System.out.println("delWidget");
 		 data.delete_!
		 JsRaw(";").cmd
	}

 	def setTitle(s:String) = callProto("update_title", s).cmd
	def content(): NodeSeq = Nil
	def callProto(option: String, value:String) = JavaScriptHelper.call(id, "protowidget", option, value)
	def call(option: String, value:String) = JavaScriptHelper.call(id, widgetType, option, value)
	def setOption(option: String, value:String) = JavaScriptHelper.setOption(id, widgetType, option, value)
	def getOption(option: String) = JavaScriptHelper.getOption(id, widgetType, option)
	def css(attr: String) = JavaScriptHelper.css(id, attr)
    def getTopJsExp = css("top")//)getOption("top")
    def getLeftJsExp = css("left")//)getOption("left")

	def setLeft(value: String): JsCmd = {
		 println("From " + id + " getLeft recieved")
		 println("Value: " + value)
		 data.left(value.split('.')(0).reverse.drop(2).reverse.toInt).save
		 JsRaw(";").cmd
	}

    def setTop(value: String): JsCmd = {
        println("From " + id + " getTop recieved")
        println("Value: " + value)
        data.top(value.split('.')(0).reverse.drop(2).reverse.toInt).save
        JsRaw(";").cmd
    }

    def parentTag = List(("parentTag", "$(\"#" + parent +  "\")"))
    def admin = if (User.superUser_?) List(("admin", "$(\"#" + ToolBox.id + "\")"),
                ("admin_url", """[ "",
		         "/widget/""" + data.id.is + """" ]"""),
    			("admin_onClick", """[
    			   function(){}, function(){},""" + JavaScriptHelper.callback(delWidget) + """,
    			   function(){}]""")) else Nil
    def isActive = if(isFav) List(("is_active", "true")) else Nil
}

abstract class KNXWidget[T](destAddress:String, name:String, mainNumber:Int, dptID:String){
	System.out.println(destAddress);
    val destDevice = new GroupAddress(destAddress)
    val dptx: DPTXlator
    val dp: Datapoint

    def translate (value: T): String
	def write (status: T) = if(Connection.isConnected) Connection.knxComm.write(dp, translate(status))
	def write (status: String) = if(Connection.isConnected) Connection.knxComm.write(dp, status)
}

abstract class StateKNXWidget[T] (destAddress:String, name:String, mainNumber:Int, dptID:String)
		 extends KNXWidget[T](destAddress, name, mainNumber, dptID){
    override val dp = new StateDP(destDevice, name, mainNumber, dptID)

    def translate (value: String): T
    def translate (value: Array[Byte]): String
	def getStatus (): Box[T] = {
	  if(Connection.isConnected){
		  Log.info(Connection.knxComm.toString)
		  Full(translate(Connection.knxComm.read(dp)))
	  }else
         Empty
	}
}

abstract class CommandKNXWidget [T] (destAddress:String, name:String, mainNumber:Int, dptID:String)
		 extends KNXWidget[T] (destAddress, name, mainNumber, dptID){
    override val dp = new CommandDP(destDevice, name, mainNumber, dptID)
}

from org.sombrero.widget.Widget.scala














package org.sombrero.widget.knx


import _root_.net.liftweb.http._
import S._
import _root_.scala.xml._
import _root_.net.liftweb.http.js.{JE,JsCmd,JsCmds, JsExp}
import JsCmds._
import JE.{JsRaw,Str}
import _root_.net.liftweb.util._

import org.sombrero.util._
import org.sombrero.model._
import org.sombrero.snippet._

import tuwien.auto.calimero.dptxlator._

class Lamp (data: org.sombrero.model.Widget) extends StateWidget(data, "binary"){
   val knx = new KNXLamp(data.knx().groupAddress.is)
   var status:Boolean = false//knx.getStatus

   properties ++ Map(
     	"value" -> status.toString
   )

   def translate(value: Array[Byte]): String = knx.translate(knx.translate(value)).toString
   def translate(value: String): String = {
      Log.info("I'm a Lamp tell me what to do");
      value
   }
}

class KNXLamp (destAddress:String)
	extends StateKNXWidget [Boolean](destAddress, "Lamp",
			TranslatorTypes.TYPE_BOOLEAN, DPTXlatorBoolean.DPT_SWITCH.getID){
	val dptx = new DPTXlatorBoolean (DPTXlatorBoolean.DPT_SWITCH.getID)

    def translate (value: Boolean): String = {
      dptx.setValue(value)
      dptx.getValue
    }

    def translate (value: String): Boolean = {
      dptx.setValue(value)
      dptx.getValueBoolean
    }

    def translate (value: Array[Byte]): String = {
		dptx.setData(value)
		dptx.getValue
    }
}

from org.sombrero.widget.knx.Lamp.scala





package org.sombrero.widget.knx

import _root_.net.liftweb.http._
import S._
import _root_.net.liftweb.util._
import Helpers._
import _root_.scala.xml._
import _root_.net.liftweb.http.js.{JE,JsCmd,JsCmds}
import JsCmds._
import JE.{JsRaw,Str}
import _root_.net.liftweb.http.SHtml._
import _root_.scala.util.Random
import _root_.net.liftweb.util.Log
import java.net._
import net.liftweb.http.js._

import org.sombrero.util._
import org.sombrero.model._
import org.sombrero.snippet._

import tuwien.auto.calimero.dptxlator._
import tuwien.auto.calimero.exception.KNXException._
import tuwien.auto.calimero.link._


class Unary (data: org.sombrero.model.Widget) extends CommandWidget(data, "unary"){
   val knx = new KNXSwitch(data.knx.groupAddress.is)
   var status = false//!device.getStatus
   properties ++ Map(
        "img" -> "\"/images/Toggle.png\""
   )

   def translate(value: String): String = {
      Log.info("I'm a Switch tell me what to do");
      value
   }
}

class Switch (data: model.Widget) extends Unary(data)

class SwitchOff (data: org.sombrero.model.Widget) extends Unary(data){
  properties ++ Map("img" -> "\"/images/ButtonOff.png\"")
}

class SwitchOn (data: org.sombrero.model.Widget) extends Unary(data){
  properties ++ Map("img" -> "\"/images/ButtonOn.png\"")
}

class KNXSwitch(destAddress:String)
	extends CommandKNXWidget[Boolean] (destAddress, "Switch",
			TranslatorTypes.TYPE_BOOLEAN, DPTXlatorBoolean.DPT_SWITCH.getID){
	val dptx = new DPTXlatorBoolean (DPTXlatorBoolean.DPT_SWITCH.getID)
	
    def translate (value:Boolean): String = {
      dptx.setValue(value)
      dptx.getValue
    }

    def translate (value: Array[Byte]): String = {
		dptx.setData(value)
		dptx.getValue
    }
}



from org.sombrero.widget.knx.Switch.scala



package org.sombrero.widget.knx

import org.sombrero.util._
import org.sombrero.model._
import org.sombrero.snippet._
import _root_.net.liftweb.http._
import S._
import _root_.net.liftweb.util._
import Helpers._
import _root_.scala.xml._
import _root_.net.liftweb.http.js.{JE,JsCmd,JsCmds}
import JsCmds._
import JE.{JsRaw,Str}
import _root_.net.liftweb.http.SHtml._
import _root_.scala.util.Random
import _root_.net.liftweb.util.Log
import java.net._
import net.liftweb.http.js._

import tuwien.auto.calimero.dptxlator._

class Temperature (data: org.sombrero.model.Widget) extends StateWidget(data, "analog"){
  val knx = KNXTemperature(data.knx().groupAddress.is)
   var isLight = false


   properties ++ Map(
//	   "change" -> "function(){" + SHtml.ajaxCall(getTempJsExp, setTemp _)._2 + "}",
	   "clip_front" -> "true"
   )

   def setTemp(value: String): JsCmd = {
     println("From " + id + " getTemp recieved")
     println("Value: " + value)
     JsRaw(";").cmd
   }

   def getTempJsExp(): JsExp = getOption("temp")
   def translate(value: Array[Byte]): String = knx.translate(knx.translate(value)).toString
   def translate(value: String): String = {
      Log.info("I'm a Temperature tell me what to do");
      value
   }
}

case class KNXTemperature(destAddress:String)
	extends StateKNXWidget [Float](destAddress, "Temperature",
			TranslatorTypes.TYPE_2OCTET_SIGNED , DPTXlator2ByteFloat.DPT_TEMPERATURE.getID) {
	val dptx = new DPTXlator2ByteFloat (DPTXlator2ByteFloat.DPT_TEMPERATURE.getID)
	
	def translate (value:Float): String = {
      dptx.setValue(value)
      dptx.getValue
    }

    def translate (value: String):Float = {
      dptx.setValue(value)
      dptx.getValueFloat
    }

    def translate (value: Array[Byte]): String = {
		dptx.setData(value)
		dptx.getValue
    }
}


from org.sombrero.widget.knx.Temperature.scala


(function($) {

$.widget("ui.protowidget", {
	_init: function (){
		var that = this;
		this.hoff = this._getData('hoff');
		this.off = this._getData('off');
	
		this.element
		.attr("class", "ui-state-default ui-corner-all")
		.css({
			position: 	"absolute",
			border: 	"1px solid black",
			height: 	(this._getData('height')+this.hoff+this.off) 	+ "px",
			width:		(this._getData('width')+this.off) 		+ "px",
			top: 		this._getData('top') 				+ "px",
			left: 		this._getData('left') 				+ "px"})
		.hover(function(){ that.mouseOn(); },
				function(){ that.mouseOff(); });
		    	
		if(this._getData('hoveroff')){
			this.element
			.removeClass('ui-state-default')
			.removeClass('ui-corner-all');
		}
		
		this.toolbox();
		this.draggable();
		this.titlebar();
	},
	mouseOn: function(){
		if(!this._getData('hoveroff')) this.element.addClass("ui-state-hover");
	},
	mouseOff: function(){
		if(!this._getData('hoveroff')) this.element.removeClass("ui-state-hover");
	},
	titlebar: function(){
		var that = this;
		var fav = that._getData('favorites');
		
    	this.element.titlebar({
			top: 5,
			left: 4,
			width: this._getData('width')-8,
			height: this.hoff,
			text:	this._getData('text'),
			is_active: this._getData('is_active'),
			active: function(){
				if(fav != null)
					//if(that._getData('admin')){
						//fav.favorites('append', that.element.detach());
					//}else{
						that._setData('copy', that._getData('createCopy')());
						fav.favorites('append', that._getData('copy').detach());
					//}
				that._getData('active')();
			},
			inactive: function(){
				if(fav != null)
					if(that._getData('copy') != null)
						fav.favorites('remove', that._getData('copy'));
					else{
						if(that._getData('parentTag') != null)
							/*if(that._getData('admin')){
								fav.favorites('remove', that.element);
								that.element
								.appendTo(that._getData('parentTag'))
								.css({
									top: that._getData('top') + "px",
									left: that._getData('left') + "px"
								});
								that.reactivate();
							}else{*/
								if(that._getData('parentObj') != null)
									that._getData('parentObj').titlebar('click');
							//}
						else
							fav.favorites('remove', that.element);
					}
				that._getData('inactive')();
			}
    	});
	},
	toolbox: function(){
		var that = this;
		var adm = that._getData('admin');
		var fav = that._getData('favorites');
		
		var admin_fun = [
		    function(){
		    	that._getData('admin_onClick')[0]();
			},		//callback is called on the click on
			function(){
				that._getData('admin_onClick')[1]();
			},		//the associated icon of the admin widget
			function(){
				$('<div>Do you want to delete this widget?</div>').dialog({
					modal: true,
					title: "Delete",
					width: 400,
					buttons: {
						"OK": function() {
							that._getData('admin_onClick')[2]();
							that.element.remove();
							if(that._getData('copy') != null)
								fav.favorites('remove', that._getData('copy'));
							$(this).dialog("close");
						},
						"Cancel": function(){
							$(this).dialog("close");
						}
				}});
			},
			function(el){
				that._getData('admin_onClick')[3]();
				if(el.hasClass('ui-icon-minus')){	// has class
					//that.element.remove();
					adm.favorites('append', that.element);
					//that.element.toolbox('reactivate');
					//that.toolbox();
					//that.reactivate();
					el.removeClass('ui-icon-minus')
					.addClass('ui-icon-plus');
					that._getData("in_toolbox")();
				}else{
					adm.favorites('move', that.element);
					that.element
					.appendTo(that._getData('parentTag'))
					.css({
						top: that._getData('top') + "px",
						left: that._getData('left') + "px"
					});
					that.draggable();
					//that.reactivate();
					el
					.removeClass('ui-icon-plus')
					.addClass('ui-icon-minus');
					that._getData("out_toolbox")();
				}
			}
		];

		if(this._getData('admin') != null)
	    	this.element.toolbox({
	    		admin_img: this._getData('admin_img'),
				admin_onClick: admin_fun,
				pheight: this._getData('height')+this.hoff+this.off,
				pwidth: this._getData('width'),
				admin: this._getData('admin'),
				admin_url: this._getData('admin_url')
			});
	},
	draggable: function(){
		var that = this;
		var isDragged = false;
		var ext = {};
		
		if(this._getData('cancel') != "")
			ext = {cancel: this._getData('cancel')};
		this.element.draggable($.extend(ext, {
			snap: true,
			snapMode: "both",
			snapTolerance: "10",
			cancel: this._getData('cancel'),
			stop: function(event, ui){
				that._setData('top', ui.position.top);
				that._setData('left', ui.position.left);
				that._getData('stop')();
				that._setData('isDragged', true);
			},
			collide: "block",
			containment: this._getData('parentTag')//,
			//revert: 'valid'
			//cancel: "div:not(#" + this.element.attr("id") + ")"
		}));
		/*this.element.droppable({
			accept: ".ui-draggable",
			tolerance: "touch"//,
			//drop: function(event, ui){
			//}
		});*/
	},
	reactivate: function(){
		if(this._getData('admin') != null)
			this.toolbox();
		this.draggable();
	},
	destroy: function() {
		//this.element.detach();
		//$.ui.protowidget.prototype.destroy.call(this);
	},
	update_title: function(s) {
		this.element.titlebar('update_title', s);
	}
});

$.extend($.ui.protowidget, {
	version: "1.0",							//version number
	defaults: {
	    top: 0,								//top value of the widget
	    left: 0,							//left value of the widget
		height: 200,						//height value of the widget
		width: 200,							//width value of the widget
	    stop: function(){},					//callback is called when drag stopped
	    prefix: "proto",							//prefix for the id atribute
		admin_img: [     "ui-icon-help",
		                 "ui-icon-wrench",	//array filled with css classes to display
			             "ui-icon-trash",	//the clickable icons of the admin widget
			             "ui-icon-minus"],
		admin_onClick: [ function(){},		//callback is called on the click on
		                 function(){},		//the associated icon of the admin widget
		                 function(){},
		                 function(){}],
		text: "",
		is_active: false,
		favorites: null,
	    admin: null,					//true -> admin mode - false -> normal mode
	    createCopy: function(){},
	    isDragged: false,
	    hoff: 33,
	    off: 2,
	    parentTag: null,
	    parentObj: null,
		active: 	   function(){},
		inactive: 	   function(){},
		cancel: "",
		admin_url: 		[ "",
		           		  "" ],
		copy: 			null,
		hoveroff:		false,
		in_toolbox:		function(){},
		out_toolbox:	function(){}
	}
});
})(jQuery);

from toserve/widget/js/ui.protowidget.js


(function($) {

$.widget("ui.binary", {
	_init: function (){
		var that = this;

		if(this._getData('value'))
			var img = this._getData('imgOn');
		else
			var img = this._getData('imgOff');

		this.element.protowidget( $.extend({}, this.options, {
			createCopy: function(){
				return $('<div></div>').binary($.extend({}, that.options, {
					is_active: true,
					parentObj: that.element
				}));
			}
		}));
		
		this.img = $("<img></img>")
		.css({
			position: 	"absolute",
			height: 	(this._getData('height')) + "px",
			width:		(this._getData('width'))  + "px",
			top: 		this.element.protowidget('option', 'hoff') + "px",
			left: 		"0px"})
		.attr("src", img)
		.click(function (){
			if(!that.element.protowidget('option', 'isDragged'))
				that._getData('change')();
			else
				that.element.protowidget('option', 'isDragged', false);
		})
		.appendTo(this.element);
		
	},
	update_value: function(newValue){
		if(newValue)
			this.img.attr("src", this._getData('imgOn'));
		else
			this.img.attr("src", this._getData('imgOff'));
		this._setData('value', newValue);
	}
});

$.extend($.ui.binary, {
	version: "1.0",							//version number
	defaults: {
	    top: 0,								//top value of the widget
	    left: 0,							//left value of the widget
		height: 160,						//height value of the widget
		width: 160,							//width value of the widget
		imgOn: "/images/lightbulb1.png",		//img in widget when value = true
		imgOff: "/images/lightbulb1off.png",  //img in widget when value = false
		click: function(){},				//callback is called on click
	    stop: function(){},					//callback is called when drag stopped
	    prefix: "lamp",							//prefix for the id atribute
	    imgId: "img",
	    admin: null,					//true -> admin mode - false -> normal mode
		admin_img: [     "ui-icon-help",
		                 "ui-icon-wrench",	//array filled with css classes to display
			             "ui-icon-trash",	//the clickable icons of the admin widget
			             "ui-icon-minus"],
		admin_onClick: [ function(){},		//callback is called on the click on
		                 function(){},		//the associated icon of the admin widget
		                 function(){},
		                 function(){}],
		text: "",
		is_active: false,
		favorites: null,
		parentTag: null,
		active: 	   function(){},
		inactive: 	   function(){},
		admin_url: 		[ "",
		           		  "" ],
		in_toolbox:		function(){},
		out_toolbox:	function(){},
	    value: true,						//true -> on - false -> off
		change:			function(){}
	}
});
})(jQuery);


from toserve/widget/js/ui.binary.js

package org.sombrero.util

import net.liftweb.http.js._
import _root_.net.liftweb.http._
import S._
import _root_.net.liftweb.util._
import Helpers._
import _root_.scala.xml._
import _root_.net.liftweb.http.js.{JE,JsCmd,JsCmds}
import JsCmds._ // For implicits
import JE.{JsRaw,Str}
import _root_.net.liftweb.http.SHtml._
import _root_.scala.util.Random

object JavaScriptHelper {
	val emptyFunction = JsRaw("function(){}").cmd;

 	def onLoad(content: String): NodeSeq = {
		<head>
			<script type="text/javascript">
				{ Unparsed("""
						$(document).ready(function(){""" +
							content
						+ """});
				""")}
			</script>
		</head>
	}

	def createWidget(id:String, function:String, properties:List[(String, String)], content:NodeSeq): NodeSeq = {
		onLoad(initWidget(id, function, properties))++ <div id={id}></div>
    }

	def initWidget(id:String, function:String, properties:List[(String, String)]):String = {
			"""$("#""" + id + """").""" + function + "({" +
				properties.slice(1).foldLeft ((properties(0)._1 + ": " + properties(0)._2))
                {(x, y) => x + ", " + y._1 + ": " + y._2} + 	
            "});"
	}

 	def error(mes: String): JsExp = JsRaw("$().message(\"Hello world!\")")

 	def call(id:String, widgetType:String, option:String, value:String) =
 		JsRaw("$('#" + id + "')." + widgetType + "('" + option + "', " + value + ");")
 	def css(id:String, attr: String): JsExp =
 		JsRaw("$('#" + id + "').css('" + attr + "')")
 	def getOption(id:String, widgetType:String, option:String): JsExp =
 		JsRaw("$('#" + id + "')." + widgetType + "('option', '" + option + "')")

   	def setOption(id:String, widgetType:String, option:String, value:String): JsExp =
 		JsRaw("$('#" + id + "')." + widgetType + "('option', '" + option + "', " + value + "); " + "$('#" + id + "')." + widgetType + "('updateStatus')")

 	def callback(method: () => JsCmd) = "function(){" + SHtml.ajaxInvoke(method)._2 + ";}"

 	/**
 	 * @param id the id-attribute of the link with the href of the iframe
     */
   	def popup(id:String, title: String, content: NodeSeq): NodeSeq = onLoad(initWidget(id, "fancybox", Map(
		    		"width"				-> "\"75%\"",
		    		"height"			-> "\"75%\"",
		            "autoScale"     	-> "false",
		            "transitionIn"		-> "\"none\"",
		    		"transitionOut"		-> "\"none\"",
		    		"\"type\""			-> "\"iframe\"",
		    		"title"				-> ("\"" + title + "\"")
 	).toList))
}

from org.sombrero.util.JavascriptHelper.scala